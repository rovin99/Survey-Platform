apiVersion: v1
kind: Secret
metadata:
  name: survey-service-secrets
  namespace: default
  labels:
    app: survey-management-service
type: Opaque
stringData:
  # Database Credentials (SENSITIVE)
  # Replace these values with actual secrets from your secret management system
  # DO NOT commit actual secrets to version control
  DB_USER: "${POSTGRES_USER}"
  DB_PASSWORD: "${POSTGRES_PASSWORD}"
  
  # JWT Secret Key (SENSITIVE) - Must match AuthService JWT key
  JWT_SECRET_KEY: "${JWT_SECRET_KEY}"  # Must be at least 256 bits (32 characters) for HS256
  
  # Email Service Credentials (SENSITIVE)
  EMAIL: "${SMTP_EMAIL}"
  APP_PASS: "${SMTP_APP_PASSWORD}"

---
# Example using Kubernetes external secrets operator (recommended for production)
# apiVersion: external-secrets.io/v1beta1
# kind: SecretStore
# metadata:
#   name: vault-backend
#   namespace: default
# spec:
#   provider:
#     vault:
#       server: "https://vault.example.com"
#       path: "secret"
#       version: "v2"
#       auth:
#         kubernetes:
#           mountPath: "kubernetes"
#           role: "survey-service"

---
# Example External Secret for production
# apiVersion: external-secrets.io/v1beta1
# kind: ExternalSecret
# metadata:
#   name: survey-service-secrets
#   namespace: default
# spec:
#   refreshInterval: 10s
#   secretStoreRef:
#     name: vault-backend
#     kind: SecretStore
#   target:
#     name: survey-service-secrets
#     creationPolicy: Owner
#   data:
#   - secretKey: DB_USER
#     remoteRef:
#       key: survey-service
#       property: db_user
#   - secretKey: DB_PASSWORD
#     remoteRef:
#       key: survey-service
#       property: db_password
#   - secretKey: JWT_SECRET_KEY
#     remoteRef:
#       key: survey-service
#       property: jwt_secret_key
#   - secretKey: EMAIL
#     remoteRef:
#       key: survey-service
#       property: smtp_email
#   - secretKey: APP_PASS
#     remoteRef:
#       key: survey-service
#       property: smtp_password 